Binary Search:-
#include <iostream>
using namespace std;
 
 int BinarySearch(int arr[], int n,int key){
 int s = 0;
 int e = n;
 while(s<=e){
 int mid = (s+e)/2;
 if(arr[mid]==key){
 return mid;
 }
 else if(arr[mid]>key){
 e = mid - 1;
 }
 else{
 s = mid + 1;
 }
 }
 return -1;
 }
 int main(){
 int n;
 cin>>n;
 int arr[n];
 for(int i = 0;i<n;i++){
 cin>>arr[i];
 }
 int key;
 cin>>key;
 cout<<BinarySearch(arr,n,key)<<endl;
 return 0;
 }
OUTPUT:-
5
10 20 30 40 50 
40
3



Linear Search:-
#include<iostream>
using namespace std;
int LinearSearch(int arr[],int n,int key){
 for(int i = 0;i<n;i++){
 if(arr[i]==key){
 return i;
 }
 }
 return -1;
}
int main(){
 int n;
 cin>>n;
 int arr[n];
 for(int i = 0;i<n;i++){
 cin>>arr[i];
 }
 int key;
 cin>>key;
 
 cout<<LinearSearch(arr,n,key)<<endl;
 return 0;
}
OUTPUT:-
5
10 20 37 56 45
37
2




Insertion Sorting:-
#include<iostream>
using namespace std;
int main(){
 int n;
 cin>>n;
 int arr[n];
 for(int i = 0;i<n;i++){
 cin>>arr[i];
 }
 for(int i = 1;i<n;i++){
 int current = arr[i];
 int j = i - 1;
 while(arr[j]>current && j >= 0){
 arr[j+1] = arr[j];
 j--;
 } 
 arr[j+1] = current;
 }
 for(int i = 0;i<n;i++){
 cout<<arr[i]<<" ";
 }
 cout<<endl;
 return 0;
}
OUTPUT:- 
5
7 4 9 2 1
1 2 4 7 9 




Bubble Sort:-
#include<iostream>
using namespace std;
int main(){
 int n;
 cin>>n;
 int arr[n];
 for(int i = 0;i<n;i++){
 cin>>arr[i];
 }
 int counter = 1;
 while(counter < n){
 for(int i = 0;i<n - counter;i++){
 if(arr[i]>arr[i+1]){
 int temp = arr[i];
 arr[i] = arr[i + 1];
 arr[i + 1] = temp;
 }
 }
 counter++;
 }
 for(int i = 0;i<n;i++){
 cout<<arr[i]<<" ";
 }
 cout<<endl;
 return 0;
} 
OUTPUT:-
5
21 43 45 76 34 
21 34 43 45 76




Create and Insert and Display the Binary Tree:-
#include <iostream>
using namespace std;
struct Node{
 int data;
 Node *left, *right;
 
 Node(int val){
 data = val;
 left = NULL;
 right = NULL;
 }
};
Node* insertBST(Node *root, int val){
 if(root == NULL){
 return new Node(val);
 }
 if(val < root -> data){
 root -> left = insertBST(root -> left, val);
 }
 else{
 root -> right = insertBST(root -> right, val);
 }
 return root;
}
void inorder(Node *root){
 if(root == NULL){
 return;
 }
 inorder(root -> left);
 cout<< root -> data<<" ";
 inorder(root -> right);
}
int main(){
 Node *root = NULL;
 root = insertBST(root, 5);
 insertBST(root, 1);
 insertBST(root, 3);
 insertBST(root, 4);
 insertBST(root, 2);
 insertBST(root, 7);
 inorder(root);
 cout<<endl;
 
 return 0;
}
OUTPUT:-
1 2 3 4 5 7 






DFS:-
#include <bits/stdc++.h>
using namespace std;
class Graph {
public:
 map<int, bool> visited;
 map<int, list<int> > adj;
 void addEdge(int v, int w);
 void DFS(int v);
};
void Graph::addEdge(int v, int w)
{
 adj[v].push_back(w); // Add w to vâ€™s list.
}
void Graph::DFS(int v)
{
 visited[v] = true;
 cout << v << " ";
 list<int>::iterator i;
 for (i = adj[v].begin(); i != adj[v].end(); ++i)
 if (!visited[*i])
 DFS(*i);
}
int main()
{
 Graph g;
 g.addEdge(0, 1);
 g.addEdge(0, 2);
 g.addEdge(1, 2);
 g.addEdge(2, 0);
 g.addEdge(2, 3);
 g.addEdge(3, 3);
 cout << "Following is Depth First Traversal"
 " (starting from vertex 2) \n";
 g.DFS(2);
 return 0;
}
OUTPUT:-
Following is Depth First Traversal (starting from vertex 2) 
2 0 1 3 



BFS:-
#include<bits/stdc++.h>
using namespace std;
class Graph{
 int V; 
 vector<list<int>> adj; 
public:
 Graph(int V); 
 void addEdge(int v, int w);
 void BFS(int s); 
};
Graph::Graph(int V){
 this->V = V;
 adj.resize(V);
}
void Graph::addEdge(int v, int w){
 adj[v].push_back(w);
}
void Graph::BFS(int s){
 vector<bool> visited;
 visited.resize(V,false);
 list<int> queue;
 
 visited[s] = true;
 queue.push_back(s);
 while(!queue.empty()){
 s = queue.front();
 cout << s << " ";
 queue.pop_front();
 
 for (auto adjecent: adj[s]){
 if (!visited[adjecent]){
 visited[adjecent] = true;
 queue.push_back(adjecent);
 }
 }
 }
}
int main(){
 Graph g(4);
 g.addEdge(0, 1);
 g.addEdge(0, 2);
 g.addEdge(1, 2);
 g.addEdge(2, 0);
 g.addEdge(2, 3);
 g.addEdge(3, 3);
 cout << "Following is Breadth First Traversal "
 << "(starting from vertex 2) \n";
 g.BFS(2);
 return 0;
}
OUTPUT:-
Following is Breadth First Traversal (starting from vertex 2) 
2 0 3 1 